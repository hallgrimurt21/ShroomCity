Shroom City
Shroom City
After going over our email in the morning, we discovered an email with the subject
“Mushrooms - How can we digitize them?”. We are intrigued and open the email and start
reading. This is an email from an old colleague which has been researching mushrooms and
their benefits for consumption and for supplements. He wants to set up an API which allows
researchers to quickly look up different types of mushrooms and register findings for new
species or new information about already discovered mushrooms.
After going over our email in the morning, we discovered an email with the subject
“Mushrooms
How can we digitize them?”. We are intrigued and open the email and start
reading. This is an email from an old colleague which has been researching mushrooms and
their benefits for consumption and for supplements. He wants to set up an API which allows
researchers to quickly look up different types of mushrooms and register findings for new
species or new information about already discovered mushrooms.
We decide we are ready to take on the job and respond with a firm yes - and start thinking
about how we are going to structure the API and infrastructure.
We decide we are ready to take on the job and respond with
firm yes
about how we are going to structure the API and infrastructure.
and start thinking

External API                                3
Web service                                 3
Error and input validation (5%)             3
Authentication / Authorization (10%)        4
Endpoints (10%)                             5
Services (20%)                              10
Repositories (35%)                          11
Models (5%)                                 13
Database (5%)                               13
Dockerfile (5%)                             13
Deployment (5%)                             14
Database diagram                            15
Models                                      16
DTOs                                        16
Input models                                17


External API
There is an external API which is required to use in order to make the web service function
as expected. The documentation to use the API can be found here:
https://mushrooms-api-a309dd19945c.herokuapp.com/docs/. In those documentation
there are five exposed endpoints which are all going to prove useful when working on the
assignment. Feel free to try them out to determine the data provided by each endpoint.

Web service
The web API should be written in .NET and the requirements for this section are stated in
subsections within the assignment.

Error and input validation (5%)
    ● All inputs coming from the client must be sanitized and validated according to rules
    stated in the Models section for each input model. (2.5%)
    ● All errors must be handled correctly and the correct status code according to REST
    must be used when handling those errors. (2.5%)

Authentication / Authorization (10%)
    ● All endpoints require authentication excluding (1%)
        ○ /api/account/register [POST]
        ○ /api/account/login [POST]
    ● The authentication scheme which should be used is token-based authentication
    using JWTs (5%)
        ○ Configuration settings should be stored in appsettings.json (1%)
            ■ Issuer
            ■ Audience
            ■ Signing key
            ■ Expiration in minutes
        ○ The authentication scheme should be setup using a middleware (2%)
        ○ The middleware should setup the OnTokenValidated event which checks
        whether the token is blacklisted or not (1%)
        ○ When the middleware has been implemented it should be registered within
        Program.cs (1%)
    ● Three roles should be set up with permissions listed for each role (3%)
        ○ Admin (1%)
            ■ read:mushrooms
            ■ write:mushrooms
            ■ read:researchers
            ■ write:researchers
        ○ Researcher (1%)
            ■ read:mushrooms
            ■ write:mushrooms
            ■ read:researchers
        ○ Analyst (1%)
            ■ read:mushrooms
            ■ read:researchers
    ● The roles should be enforced using policies (1%)
        ○ See endpoints for further instructions regarding enforcements. All endpoints
        within the “Endpoints” section have a role setup, this excludes the
        AccountController.

Endpoints (10%)
Each controller should make use of a corresponding service in order to retrieve data from
the database, or other sources.
    ● AccountController (2,5%)
        ○ /api/account/register [POST] - Registers a user within the application.
        (0,5%)
            ■ Request body
                ● RegisterInputModel (see Models section for reference)
            ■ Return
                ● A JWT token as string
        ○ /api/account/login [POST] - Signs the user in by checking the credentials
        provided and issuing a JWT token in return. (0,5%)
            ■ Request body
                ● LoginInputModel (see Models section for reference)
            ■ Return
                ● A JWT token as string
        ○ /api/account/logout [GET] - Logs the user out by voiding the provided JWT
        token using the id found within the claim. (0,5%)
        ○ /api/account/profile [GET] - Gets the profile information associated with the
        authenticated user. (1%)
            ■ Return
                ● A list of claims associated with the authenticated user
                    ○ Type
                        ■ Non-nullable string
                    ○ Value
                        ■ Non-nullable string
    ● MushroomsController - All endpoints within this controller require authentication
    (5,5%)
        ○ /api/mushrooms [GET] - Gets mushrooms based on criteria provided using
        query parameters. The result should be a paginated list using an envelope.
        (1%)
            ■ Query parameters
                ● Name - which will be used to match name of mushroom
                    ○ Nullable string
                ● Stem size minimum - which will be used to match a minimum
                size of stem for a mushroom
                    ○ Nullable int
                ● Stem size maximum - which will be used to match a maximum
                size of stem for a mushroom
                    ○ Nullable int
                ● Cap size minimum - which will be used to match a minimum
                size of cap for a mushroom
                    ○ Nullable int
                ● Cap size maximum - which will be used to match a maximum
                size of cap for a mushroom
                    ○ Nullable int
                ● Color - which will be used to match a certain color for a
                mushroom
                    ○ Nullable string
                ● Page size - a page size determining the size of the returned
                page in the envelope
                    ○ Int with the default value of 25
                ● Page number - a page number determining which page to
                return based on the total number of pages
                    ○ Int with the default value of 1
            ■ Role
                ● Analyst
            ■ Return
                ● An envelope containing a list of MushroomDto (see Models
        section for reference)
        ○ /api/mushrooms/{id} [GET] - Gets a single mushroom by id. This endpoint
        will return a mushroom found in the database. (0,5%)
            ■ URL parameter
                ● Id
                    ○ Non-nullable int
            ■ Role
                ● Analyst
            ■ Return
                ● A single entry of MushroomDetailsDto (see Models section for
                reference)

        ○ /api/mushrooms/lookup [GET] - Retrieves a list of all lookup mushrooms.
        The lookup mushrooms are the mushrooms which are available using the
        external API. The result should be a paginated list using an envelope. (1%)
            ■ Query parameters
                ● Page size - a page size determining the size of the returned
                page in the envelope
                    ○ Int with the default value of 25
                ● Page number - a page number determining which page to
                return based on the total number of pages
                    ○ Int with the default value of 1
            ■ Role
                ● Analyst
            ■ Return
                ● An envelope containing a list of MushroomDto (see Models
                section for reference)
        ○ /api/mushrooms [POST] - Creates a new type of mushroom (1%)
            ■ Request body
                ● MushroomInputModel (see Models section for reference)
            ■ Role
                ● Researcher
            ■ Return
                ● Status code 201 with the location header set to the newly
                created resource
        ○ /api/mushrooms/{id} [PUT] - Updates a type of mushroom, see Models
        section for reference. (0,5%)
            ■ Request body
                ● MushroomUpdateInputModel (see Models section for
                reference)
            ■ Query parameters
                ● Perform lookup - which determines whether a lookup should
                be performed to retrieve values from the external API to fill in
                the name, description and other attributes.
            ■ Role
                ● Researcher
        ○ /api/mushrooms/{id} [DELETE] - Deletes a type of mushroom. All research
        entries associated with this mushroom must be deleted as well. This
        endpoint can only delete mushrooms which are stored within the database.
        (0,5%)
            ■ URL parameters
                ● Id
                    ○ Non-nullable int
            ■ Role
                ● Researcher

        ○ /api/mushrooms/{id}/research-entries [POST] - Creates a research entry
        associated with a type of mushroom. The research entries are made by
        researchers to study mushroom types, see Models section for reference.
        This endpoint can only write research entries for mushrooms which are
        stored within the database. (1%)
            ■ URL parameters
                ● Id
                    ○ Non-nullable int
            ■ Request body
                ● ResearchEntryInputModel (see Models section for reference)
            ■ Role
                ● Researcher
            ■ Return
                ● A status code of 201
    ● ResearchersController - All endpoints within this controller require authentication
    (2%)
        ○ /api/researchers [GET] - Gets all researchers, see Models section for
        reference. (0,5%)
            ■ Role
                ● Analyst
            ■ Return
                ● A list of ResearcherDto (see Models section for reference)
                    ○ /api/researchers [POST] - Creates a new researcher, see Models section
                    for reference. (0,5%)
            ■ Request body
                ● ResearcherInputModel (see Models section for reference)
            ■ Role
                ● Admin
            ■ Return
                ● Status code 201 with the location header set to the newly
                created resource
        ○ /api/researchers/{id} [GET] - Gets a researcher by id, see Models section
        for reference. (0,5%)
            ■ URL parameters
                ● Id
                    ○ Non-nullable int
            ■ Role
                ● Analyst
            ■ Return
                ● A single entry of ResearcherDto (see Models section for
                reference)

        ○ /api/researchers/self - Gets the researcher associated with the current
        authentication scope, see Models section for reference. (0,5%)
            ■ Role
                ● Researcher
            ■ Return
                ● A single entry of ResearcherDto (see Models section for
                reference)

Services (20%)
All service classes should make use of a corresponding repository class if it is fetching data
from the database or another service when fetching from an external data source.
    • AccountService (1,5%)
        • Register (0,5%)
            • Creates the user using the appropriate repository class
        • Login (0,5%)
            • Authenticates the user using the appropriate repository class
        • SignOut (0,5%)
            • Voids the JWT token using the appropriate repository class
    • TokenService (5%)
        • The token service must use dependency injection to inject the correct values for
        JWT token configuration (1,5%)
        • GenerateJwtToken (3%)
            • Creates a valid JWT token and assigns the information stored within the
            UserDto model as claims and returns the newly created token
            • The token must be generated with the following included:
                • All required claims
                • Signed with a signing key
                • Issuer and audience set
                • Expiration date based on expiration in minutes
        • IsTokenBlacklisted (0,5%)
            • Checks if token is blacklisted using the appropriate repository class
    • ExternalMushroomService (6%)
        • GetMushrooms (3%)
            • Gets all mushrooms from the external API
        • GetMushroomByName (3%)
            • Gets a single mushroom by name from the external API
    • MushroomService (5,5%)
        • GetMushrooms (0,5%)
            • Gets all mushrooms from the database
        • GetLookupMushrooms (0,5%)
            • Gets all mushrooms from the external API
        • GetMushroomById (0,5%)
            • Gets a single mushroom by id
        • CreateMushroom (2%)
            • Fetches the mushroom from the external service to use for data population
            • Parses all associated attributes to a valid structure, a list of AttributeDto (see
            Models section for reference)
            • Creates a mushroom within the database using the appropriate repository
            function
        • UpdateMushroomById (1%)
            • If the boolean for performing lookup is set, you will need to fetch the mushroom
            from the external API to populate the data with
            • If the boolean is not set for performing lookup, you will use the provided values
            from the MushroomUpdateInputModel instead
            • Update a mushroom within the database, using the appropriate repository
            function
        • DeleteMushroomById (0,5%)
            • Delete a mushroom within the database, using the appropriate repository
            function
        • CreateResearchEntry (0,5%)
            • Creates a research entry within the database, using the appropriate repository
            function
    • ResearcherService (2%)
        • CreateResearcher (0,5%)
            • Creates a researcher within the database, using the appropriate repository
            function
        • GetAllResearchers (0,5%)
            • Gets all researchers within the database, using the appropriate repository
            function
        • GetResearcherById (0,5%)
            • Gets a single researcher by id within the database, using the appropriate
            repository function
        • GetResearcherByEmail (0,5%)
            • Gets a single researcher by email address within the database, using the
            appropriate repository function

Repositories (35%)
All repository classes should make use of the database context if it is fetching data from the
database.
● AccountRepository (3%)
    ○ Register (2%)
        ■ Validate if the user already exists or not
        ■ Should be created with the default role of Analyst
        ■ Returns the user
    ○ SignIn (1%)
        ■ Validate if the user exists based on condition
        ■ Returns the user
● MushroomRepository (21%)
    ○ GetMushroomsByCriteria (10%)
        ■ Filters the list based on provided values
            ● Name
                ○ If the item contains the name (case insensitive) it
                should be included in the result set.
            ● Stem size
                ○ If the item is within the range of stem size it should be
                included. To determine the range of stem size, the
                average of all registered attributes on the mushroom
                for stem size must be calculated. Once the average
                has been calculated, it must be between the stem size
                minimum and the stem size maximum. The reason why
                it needs to be the average of stem size attributes on
                the mushroom is because there may be multiple stem
                size entries for each mushroom.
            ● Cap size
                ○ If the item is within the range of cap size it should be
                included. To determine the range of cap size, the
                average of all registered attributes on the mushroom
                for cap size must be calculated. Once the average has
                been calculated, it must be between the cap size
                minimum and the cap size maximum. The reason why
                it needs to be the average of cap size attributes on the
                mushroom is because there may be multiple cap size
                entries for each mushroom.
            ● Color
                ○ If the item is equal to any color attribute associated
                with the mushroom (case insensitive) it should be
                included in the result set.
        ■ Returns a paginated envelope of the mushrooms filtered using the
        provided filters
    ○ GetMushroomById (1%)
        ■ Gets a mushroom based on the provided id
        ■ Returns a detailed version of a mushroom
    ○ CreateMushroom (4%)
        ■ Creates a new mushroom with provided values
        ■ Makes use of passed in attributes to associate with the mushroom
        ■ The passed in researcher email address should be used to associate
        the creation of the mushroom with a specific user
        ■ Returns the id of the new mushroom
    ○ CreateResearchEntry (4%)
        ■ Creates a research entry which is associated with a mushroom and a
        researcher. The researcher email address is used to associate a
        mushroom with a specific researcher
        ■ Validate incoming attributes, so all attributes have valid attribute
        types. A valid attribute type is an attribute type which already exists
        within the database.
        ■ All research entries should be stored within the database
        ■ A boolean should be return to indicate whether the operation was
        successful or not
    ○ UpdateMushroomById (1%)
        ■ Updates a mushroom in the database using the provided values
        ■ A boolean should be return to indicate whether the operation was
        successful or not
    ○ DeleteMushroomById (1%)
        ■ Deletes a mushroom from the database using the provided id
        ■ A boolean should be return to indicate whether the operation was
        successful or not
● ResearcherRepository (8%)
    ○ GetAllResearchers (3%)
        ■ Gets all users within the database which have either the role
        “Researcher” or “Admin”
        ■ A list of researchers should be returned, along with all properties
        populated. For each researcher all associated mushrooms must be
        part of the result set, and there can be no duplicates within the result
        set.
    ○ GetResearcherById (2%)
        ■ Gets user by id within the database which has either the role
        “Researcher” or “Admin”
        ■ A single researcher should be returned, along with all properties
        populated. All associated mushrooms must be part of the result set,
        and there can be no duplicates within the result set.
    ○ GetResearcherByEmailAddress (2%)
        ■ Gets user by email address within the database which has either the
        role “Researcher” or “Admin”
        ■ A single researcher should be returned, along with all properties
        populated. All associated mushrooms must be part of the result set,
        and there can be no duplicates within the result set.
    ○ CreateResearcher (1%)
        ■ Creating a researcher means that a user will be assigned the role
        “Researcher” - therefore a new User entity is not created within the
        database
        ■ The id of the user associated with the new role should be returned
● TokenRepository (3%)
    ○ CreateToken (1%)
        ■ Creates a new token
        ■ Returns the id of the new token
    ○ BlacklistToken (1%)
        ■ Updates a token based on the provided id by setting the token to be
        blacklisted
    ○ IsTokenBlacklisted (1%)
        ■ Returns whether the token is blacklisted or not

Models (5%)
• Setup all DTOs (see Models for reference)
• Setup all InputModels (see Models for reference)
• Setup all Entities (see Database diagram for reference)
Database (5%)
• Navigate to https://www.elephantsql.com and register for a new PostgreSQL

database
• Add the connection string to appsettings.json in the API project
• Setup a DbContext for the newly created database in the Repository project
• Register the DbContext within the API project
• Create your first migration and update the database according to those migrations
(this can be repeated every time the entity models change)

Dockerfile (5%)
• A Dockerfile should be created in order to run this application in Docker
• This file should be located in the root of the application

Deployment (5%)
In order to get the service into the hands of our customers, we must deploy to a public
available URL. In order to achieve this we are going to use Azure as a cloud provider for our
service. The following must be included in the assignment description so this section will be
graded:
    ● A public URL to your API running in Azure using a Azure App Service
    ● The Azure App Service must make use of the Docker image associated with the
    Dockerfile located in the root of the solution
README.md located in the root of the solution stating the commands needed to deploy the
API to an Azure App Service using the Azure CLI

Models
Below you can see the model structure for each model within the application, this includes:
Dtos and InputModels. Entity models are excluded because they can be derived from the
database diagram.

DTOs
    ● UserDto
        ○ Id
            ■ Non-nullable int
        ○ Name
            ■ Non-nullable string
        ○ EmailAddress
            ■ Non-nullable string
        ○ Bio
            ■ Nullable string
        ○ Permissions
            ■ Non-nullable list of strings
        ○ TokenId
            ■ Non-nullable int
    ● ResearcherDto
        ○ Id
            ■ Non-nullable int
        ○ Name
            ■ Non-nullable string
        ○ EmailAddress
            ■ Non-nullable string
        ○ Bio
            ■ Nullable string
        ○ AssociatedMushrooms
            ■ List of MushroomDto
            ■ Nullable
    ● MushroomDto
        ○ Id
            ■ Nullable int
                ● If null the property should be ignored when being JSON
                serialized
        ○ Name
            ■ Non-nullable string
        ○ Description
            ■ Nullable string
    ● MushroomDetailsDto
        ○ Id
            ■ Non-nullable int
        ○ Name
            ■ Non-nullable string
        ○ Description
            ■ Nullable string
        ○ Attributes
            ■ List of AttributeDto
            ■ Defaults to an empty list
    ● ExternalMushroomDto
        ○ Id
            ■ Non-nullable string
            ■ JSON serialized from the key “_id”
        ○ Name
            ■ Non-nullable string
        ○ Description
            ■ Non-nullable string
        ○ Colors
            ■ Non-nullable list of strings
        ○ Shapes
            ■ Non-nullable list of strings
        ○ Surfaces
            ■ Non-nullable list of strings
    ● ExternalAttributeDto
        ○ Id
            ■ Non-nullable string
            ■ JSON serialized from the key “_id”
        ○ Name
            ■ Non-nullable string
    ● AttributeDto
        ○ Id
            ■ Non-nullable int
        ○ Value
            ■ Non-nullable string
        ○ Type
            ■ Non-nullable string
        ○ RegisteredBy
            ■ Nullable string
        ○ RegistrationDate
            ■ Nullable DateTime

Input models
    ● LoginInputModel
        ○ EmailAddress
            ■ Non-nullable string
            ■ A required field
            ■ Must be a valid email address
        ○ Password
            ■ Non-nullable string
            ■ A required field
            ■ Must be at least 6 characters in length
    ● RegisterInputModel
        ○ FullName
            ■ Non-nullable string
            ■ A required field
            ■ Must be at least 5 characters in length
        ○ EmailAddress
            ■ Non-nullable string
            ■ A required field
            ■ Must be a valid email address
        ○ Password
            ■ Non-nullable string
            ■ A required field
            ■ Must be at least 6 characters in length
        ○ PasswordConfirmation
            ■ Non-nullable string
            ■ A required field
            ■ Must be identical to the field “Password”
    ● MushroomInputModel
        ○ Name
            ■ Non-nullable string
            ■ A required field
        ○ Description
            ■ Nullable string
    ● MushroomUpdateInputModel
        ○ Name
            ■ Non-nullable string
        ○ Description
            ■ Nullable string
    ● ResearchEntryInputModel
        ○ Entries
            ■ A list of key value pairs
                ● Key
                    ○ Non-nullable string
                ● Value
                    ○ Non-nullable string
    ● ResearcherInputModel
        ○ EmailAddress
            ■ Non-nullable string
            ■ A required field
            ■ Must be a valid email address
